--- drivers/usb/core/hub.c
+++ drivers/usb/core/hub.c
@@ -1581,13 +1581,6 @@
        usb_set_device_state(udev, USB_STATE_NOTATTACHED);
        dev_info (&udev->dev, "USB disconnect, address %d\n", udev->devnum);
 
-#ifdef CONFIG_USB_OTG
-       if (udev->bus->hnp_support && udev->portnum == udev->bus->otg_port) {
-               cancel_delayed_work_sync(&udev->bus->hnp_polling);
-               udev->bus->hnp_support = 0;
-       }
-#endif
-
        usb_lock_device(udev);
 
        /* Free up all the children before we remove this device */
@@ -1692,31 +1685,15 @@
                                        (port1 == bus->otg_port)
                                                ? "" : "non-");
 
-                               /* a_alt_hnp_support is obsoleted */
-                               if (port1 != bus->otg_port)
-                                       goto fail;
-
-                               bus->hnp_support = 1;
-
-                               /* a_hnp_support is not required for devices
-                                * compliant to revision 2.0 or subsequent
-                                * versions.
-                                */
-                               if (desc->bLength == sizeof(*desc) &&
-                                       le16_to_cpu(desc->bcdOTG) >= 0x0200)
-                                       goto out;
-
-                               /* Legacy B-device i.e compliant to spec
-                                * revision 1.3 expect A-device to set
-                                * a_hnp_support or b_hnp_enable before
-                                * selecting configuration. b_hnp_enable
-                                * is set before suspending the port.
-                                */
-
+                               /* enable HNP before suspend, it's simpler */
+                               if (port1 == bus->otg_port)
+                                       bus->b_hnp_enable = 1;
                                err = usb_control_msg(udev,
                                        usb_sndctrlpipe(udev, 0),
                                        USB_REQ_SET_FEATURE, 0,
-                                       USB_DEVICE_A_HNP_SUPPORT,
+                                       bus->b_hnp_enable
+                                               ? USB_DEVICE_B_HNP_ENABLE
+                                               : USB_DEVICE_A_ALT_HNP_SUPPORT,
                                        0, NULL, 0, USB_CTRL_SET_TIMEOUT);
                                if (err < 0) {
                                        /* OTG MESSAGE: report errors here,
@@ -1725,32 +1702,24 @@
                                        dev_info(&udev->dev,
                                                "can't set HNP mode: %d\n",
                                                err);
-                                       bus->hnp_support = 0;
+                                       bus->b_hnp_enable = 0;
                                }
                        }
                }
        }
-out:
+
        if (!is_targeted(udev)) {
 
                /* Maybe it can talk to us, though we can't talk to it.
                 * (Includes HNP test device.)
                 */
-               if (udev->bus->hnp_support) {
+               if (udev->bus->b_hnp_enable || udev->bus->is_b_host) {
                        err = usb_port_suspend(udev, PMSG_SUSPEND);
                        if (err < 0)
                                dev_dbg(&udev->dev, "HNP fail, %d\n", err);
                }
                err = -ENOTSUPP;
-       } else if (udev->bus->hnp_support &&
-                       udev->portnum == udev->bus->otg_port) {
-               /* HNP polling is introduced in OTG supplement Rev 2.0
-                * and older devices does not support. Work is not
-                * re-armed if device returns STALL. B-Host also performs
-                * HNP polling.
-                */
-               schedule_delayed_work(&udev->bus->hnp_polling,
-                       msecs_to_jiffies(THOST_REQ_POLL));
+               goto fail;
        }
 fail:
 #endif
@@ -2241,21 +2210,6 @@
                }
        }
 
-#ifdef CONFIG_USB_OTG
-       if (!udev->bus->is_b_host && udev->bus->hnp_support &&
-                       udev->portnum == udev->bus->otg_port) {
-               status = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),
-                               USB_REQ_SET_FEATURE, 0,
-                               USB_DEVICE_B_HNP_ENABLE,
-                               0, NULL, 0, USB_CTRL_SET_TIMEOUT);
-               if (status < 0)
-                       dev_dbg(&udev->dev, "can't enable HNP on port %d, "
-                                       "status %d\n", port1, status);
-               else
-                       udev->bus->b_hnp_enable = 1;
-       }
-#endif
-
        /* see 7.1.7.6 */
        status = set_port_feature(hub->hdev, port1, USB_PORT_FEAT_SUSPEND);
        if (status) {
@@ -2399,11 +2353,6 @@
        int             status;
        u16             portchange, portstatus;
 
-#ifdef CONFIG_USB_OTG
-       if (!udev->bus->is_b_host && udev->bus->hnp_support &&
-                       udev->portnum == udev->bus->otg_port)
-               udev->bus->b_hnp_enable = 0;
-#endif
        /* Skip the initial Clear-Suspend step for a remote wakeup */
        status = hub_port_status(hub, port1, &portstatus, &portchange);
        if (status == 0 && !(portstatus & USB_PORT_STAT_SUSPEND))
